import { NextResponse } from "next/server";
import { auth } from "@/lib/auth";
import { prisma } from "@/lib/prisma";
import { z } from "zod";

// Input validation schema
const createProjectSchema = z.object({
  name: z.string().min(1, "Name is required"),
  description: z.string().default(""),
  status: z.enum(["active", "completed", "on-hold"]).default("active"),
  startDate: z.string().datetime(),
  endDate: z.string().datetime().nullable().optional(),
  managerId: z.string().min(1, "Manager ID is required"),
  teamMembers: z.array(z.string()).default([]),
});

type ProjectWithManager = {
  id: string;
  name: string;
  description: string;
  status: string;
  startDate: Date;
  endDate: Date | null;
  managerId: string;
  teamMembers: string;
  createdAt: Date;
  updatedAt: Date;
  manager: {
    id: string;
    name: string | null;
    email: string | null;
    image: string | null;
  };
};

// Helper function to format project response
const formatProjectResponse = (project: ProjectWithManager) => ({
  id: project.id,
  name: project.name,
  description: project.description,
  status: project.status,
  startDate: project.startDate.toISOString(),
  endDate: project.endDate?.toISOString() || null,
  managerId: project.managerId,
  teamMembers: JSON.parse(project.teamMembers as string),
  createdAt: project.createdAt.toISOString(),
  updatedAt: project.updatedAt.toISOString(),
  manager: {
    id: project.manager.id,
    name: project.manager.name,
    email: project.manager.email,
    image: project.manager.image,
  },
});

export async function GET(req: Request) {
  try {
    const session = await auth();
    if (!session?.user) {
      return NextResponse.json(
        { error: "Unauthorized" },
        { status: 401 }
      );
    }

    const { searchParams } = new URL(req.url);
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '10');
    const skip = (page - 1) * limit;

    // Get total count for pagination
    const total = await prisma.project.count({
      where: {
        OR: [
          { managerId: session.user.id },
          { teamMembers: { contains: `"${session.user.id}"` } },
        ],
      },
    });

    const projects = await prisma.project.findMany({
      where: {
        OR: [
          { managerId: session.user.id },
          { teamMembers: { contains: `"${session.user.id}"` } },
        ],
      },
      include: {
        manager: {
          select: {
            id: true,
            name: true,
            email: true,
            image: true,
          },
        },
      },
      orderBy: {
        createdAt: "desc",
      },
      skip,
      take: limit,
    });

    return NextResponse.json({
      data: projects.map(formatProjectResponse),
      pagination: {
        total,
        page,
        totalPages: Math.ceil(total / limit),
      },
    });
  } catch (error) {
    console.error("[PROJECTS_GET]", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

export async function POST(req: Request) {
  try {
    const session = await auth();
    if (!session?.user) {
      return NextResponse.json(
        { error: "Unauthorized" },
        { status: 401 }
      );
    }

    const body = await req.json();
    
    // Validate input
    const validation = createProjectSchema.safeParse(body);
    if (!validation.success) {
      return NextResponse.json(
        { error: "Validation failed", details: validation.error.format() },
        { status: 400 }
      );
    }

    const { name, description, status, startDate, endDate, teamMembers, managerId } = validation.data;

    // Check if manager exists
    const manager = await prisma.user.findUnique({
      where: { id: managerId },
    });

    if (!manager) {
      return NextResponse.json(
        { error: "Manager not found" },
        { status: 404 }
      );
    }

    // Create the project
    const project = await prisma.project.create({
      data: {
        name,
        description,
        status,
        startDate: new Date(startDate),
        endDate: endDate ? new Date(endDate) : null,
        managerId,
        teamMembers: JSON.stringify(teamMembers),
      },
      include: {
        manager: {
          select: {
            id: true,
            name: true,
            email: true,
            image: true,
          },
        },
      },
    });

    return NextResponse.json({
      data: formatProjectResponse(project as ProjectWithManager),
    }, { status: 201 });
  } catch (error) {
    console.error("[PROJECTS_POST]", error);
    return NextResponse.json(
      { error: "Failed to create project" },
      { status: 500 }
    );
  }
}
