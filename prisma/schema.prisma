// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  projects      Project[]
  employees     Employee[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String    @default("active")
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  managerId   String
  manager     User      @relation(fields: [managerId], references: [id], onDelete: Cascade)
  teamMembers String    @default("[]") // Store as JSON string
  tasks       Task[]
}

model Employee {
  id            String    @id @default(cuid())
  employeeId    String    @unique
  name          String
  email         String?
  joiningDate   DateTime
  basicSalary   Decimal
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  tasks         Task[]
  salaryRecords SalaryRecord[]
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  priority    String    @default("medium")
  status      String    @default("todo")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  assigneeId  String?
  assignee    Employee? @relation(fields: [assigneeId], references: [id])
}

model SalaryRecord {
  id            String    @id @default(cuid())
  month         Int       // 1-12
  year          Int
  basicSalary   Decimal
  bonus         Decimal   @default(0)
  deductions    Decimal   @default(0)
  netSalary     Decimal   // Calculated field
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  employeeId    String
  employee      Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  @@unique([employeeId, month, year])
} 